<?php

/**
 * @file
 * Alter Drupal for use SAE mail system and storage system.
 */

/**
 * Implements hook_perm().
 */
function sae_permission() {
  return array(
    'administer saemailer settings' => array(
      'title' => t('Administer SAE Mailer settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sae_menu() {
  $items['admin/config/system/saemailer'] = array(
    'title' => 'SAE Mail',
    'description' => 'Configure SAE mail settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sae_mailer_settings_form'),
    'access arguments' => array('administer saemailer settings'),
  );
  return $items;
}

/**
 * Form builder for sae mail settings page.
 *
 * @ingroup forms
 * @see sae_mailer_settings_form_validate()
 * @see sae_mailer_settings_form_submit()
 */
function sae_mailer_settings_form($form, $form_state) {
  $form['sae_on'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use SAE Mail to send e-mails'),
    '#default_value' => variable_get('sae_on', 0),
    '#description' => t('When enabled, SAE Mail will be used to deliver all site e-mails.'),
  );

  $form['server']['smtp_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Primary SMTP server'),
    '#default_value' => variable_get('smtp_host', ''),
    '#description' => t('The host name or IP address of your primary SMTP server. (Leave blank if use sina,mail,163,265,netease,qq,sohu,yahoo smtp service)', array('!gmail-smtp' => '<code>smtp.gmail.com</code>')),
  );
  $form['server']['smtp_port'] = array(
    '#type' => 'textfield',
    '#title' => t('SMTP port'),
    '#size' => 5,
    '#maxlength' => 5,
    '#default_value' => variable_get('smtp_port', ''),
    '#description' => t('The standard SMTP port is 25, for Google Mail use 465. (Leave blank if use sina,mail,163,265,netease,qq,sohu,yahoo smtp service)'),
  );
  $form['server']['smtp_tls'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use TLS protocol'),
    '#default_value' => variable_get('smtp_tls', ''),
    '#description' => t('Whether to use TLS encrypted connection to communicate with the SMTP server. (Leave blank if use sina,mail,163,265,netease,qq,sohu,yahoo smtp service)'),
  );

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('SMTP authentication'),
    '#description' => t('Leave blank if your SMTP server does not require authentication.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['auth']['smtp_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#required' => TRUE,
    '#default_value' => variable_get('smtp_username', ''),
    '#description' => t('Always enter your username including mail adress like "example@gmail.com".'),
  );
  $have_password = (variable_get('smtp_password', '') != '');
  $password_title = $have_password ? t('Change password') : t('Password');
  $password_description = $have_password ? t('Leave empty if you do not intend to change the current password.') : t('Password of smtp server, usually is your email password.');
  $form['auth']['smtp_password'] = array(
    '#type' => 'password',
    '#title' => check_plain($password_title),
    '#description' => check_plain($password_description),
  );

  // Send a test email message if an address has been entered.
  if ($test_address = variable_get('sae_mailer_test', '')) {
    // Delete first to avoid unintended resending in case of an error.
    variable_del('sae_mailer_test');
    // If SAE Mail is enabled, send via regular drupal_mail().
    drupal_mail('sae', 'test', $test_address, NULL);

    drupal_set_message(t('A test e-mail has been sent to %email. <a href="@watchdog-url">Check the logs</a> for any error messages.', array(
      '%email' => $test_address,
      '@watchdog-url' => url('admin/reports/dblog'),
    )));
  }

  $form['test'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['test']['sae_mailer_test'] = array(
    '#type' => 'textfield',
    '#title' => t('Recipient'),
    '#default_value' => '',
    '#description' => t('Type in an address to have a test e-mail sent there.'),
  );

  $form['#submit'] = array('sae_mailer_settings_form_submit');

  return system_settings_form($form);
}

/**
 * Form validation function.
 *
 * @see sae_mailer_settings_form()
 */
function sae_mailer_settings_form_validate($form, &$form_state) {
  if ($form_state['values']['sae_on']) {
    if (intval($form_state['values']['smtp_port']) == 0) {
      // form_set_error('smtp_port', t('You must enter a valid SMTP port number.
      // '));
    }
  }
}

/**
 * Form submit function.
 *
 * @see sae_mailer_settings_form()
 */
function sae_mailer_settings_form_submit($form, &$form_state) {
  // Enable/disable mail sending subsystem.
  if ($form_state['values']['sae_on']) {
    if (!sae_mailer_enabled()) {
      $mail_system = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
      $mail_system['default-system'] = 'SAEMailSystem';
      variable_set('mail_system', $mail_system);

      drupal_set_message(t('SAE Mailer will be used to deliver all site e-mails.'));
      watchdog('sae', 'SAE Mail has been enabled.');
    }
  }
  elseif (sae_mailer_enabled()) {
    // Remove SAE Mail from all mail keys it is configured for.
    $mail_system = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
    foreach ($mail_system as $key => $class) {
      if ($class == 'SAEMailSystem') {
        if ($key != 'default-system') {
          unset($mail_system[$key]);
        }
        else {
          $mail_system[$key] = 'DefaultMailSystem';
        }
      }
    }
    variable_set('mail_system', $mail_system);

    drupal_set_message(t('SAE Mailer has been disabled.'));
    watchdog('sae', 'SAE Mail has been disabled.)');
  }

  // Log configuration changes.
  $settings = array('host', 'port', 'tls', 'username');
  // Ignore empty passwords if hide password is active.
  if ($form_state['values']['smtp_password'] == '') {
    unset($form_state['values']['smtp_password']);
  }
  else {
    $settings[] = 'password';
  }

  foreach ($settings as $setting) {
    if ($form_state['values']['smtp_' . $setting] != variable_get('smtp_' . $setting, '')) {
      watchdog('sae', 'SMTP configuration changed.');
      break;
    }
  }
}

/**
 * Implements hook_mail().
 */
function sae_mail($key, &$message, $params) {
  // Alter test mail's subject and content.
  if ($key == 'test') {
    $message['subject'] = t('SAE Mail test e-mail');
    $message['body'][] = t('Your site is properly configured to send e-mails using the <strong>SAE Mail</strong> library.');
  }
}

/**
 * Determine if SAE Mail is used to deliver e-mails.
 */
function sae_mailer_enabled() {
  // We need to rely on our 'smtp_on' variable, since SAE Mail may not be
  // configured as the default mail system.
  return (bool) variable_get('sae_on', 0);
}

/**
 * Extract address and optional display name of an e-mail address from phpmailer
 * module.
 *
 * @param string $string
 *   A string containing one or more valid e-mail address(es) separated with
 *   commas.
 *
 * @return array
 *   An array containing all found e-mail addresses split into mail and name.
 */
function sae_mailer_parse_address($string) {
  $parsed = array();

  // The display name may contain commas (3.4). Extract all quoted strings
  // (3.2.4) to a stack and replace them with a placeholder to prevent
  // splitting at wrong places.
  $string = preg_replace_callback('/(".*?(?<!\\\\)")/', '_sae_mailer_stack', $string);

  // Build a regex that matches a name-addr (3.4).
  // @see valid_email_address()
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(?:\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(?:\:[0-9a-fA-F]{1,4}){7}';
  $address = "$user@(?:$domain|(?:\[(?:$ipv4|$ipv6)\]))";
  $adr_rx = "/^(?P<name>.*)\s<(?P<address>$address)>$/";

  // Split string into multiple parts and process each.
  foreach (explode(',', $string) as $email) {
    // Re-inject stripped placeholders.
    $email = preg_replace_callback('/\x01/', '_sae_mailer_stack', trim($email));
    // Check if it's a name-addr or a plain address (3.4).
    if (preg_match($adr_rx, $email, $matches)) {
      // SAE Mailer expects an unencoded display name.
      $parsed[] = array('mail' => $matches['address'], 'name' => mime_header_decode(stripslashes($matches['name'])));
    }
    else {
      $parsed[] = array('mail' => trim($email, '<>'), 'name' => '');
    }
  }
  return $parsed;
}

/**
 * Implements a FIFO stack to store extracted quoted strings from phpmailer
 * module.
 */
function _sae_mailer_stack($matches = NULL) {
  static $stack = array();

  if (!isset($matches[1])) {
    // Unescape quoted characters (3.2.4) to prevent double escaping.
    return str_replace(array('\"', '\\\\'), array('"', '\\'), array_shift($stack));
  }
  $string = $matches[1];
  // Remove surrounding quotes and push on stack.
  array_push($stack, drupal_substr($string, 1, -1));
  // Return placeholder substitution. 0x01 may never appear outside a quoted
  // string (3.2.3).
  return "\x01";
}

/**
 * Implements hook_disable().
 */
function sae_disable() {
  if (sae_mailer_enabled()) {
    // Remove SAE Mail from all mail keys it is configured for.
    $mail_system = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
    foreach ($mail_system as $key => $class) {
      if ($class == 'SAEMailSystem') {
        if ($key != 'default-system') {
          unset($mail_system[$key]);
        }
        else {
          $mail_system[$key] = 'DefaultMailSystem';
        }
      }
    }
    variable_set('mail_system', $mail_system);

    variable_del('sae_on');
    drupal_set_message(t('SAE Mail has been disabled.'));
  }
}

/**
 * Implements hook_boot().
 */
function sae_boot() {
  global $conf;
  $conf['file_temporary_path'] = SAE_TMP_PATH;
}

/**
 * Implements hook_stream_wrappers_alter().
 */
function sae_stream_wrappers_alter(&$wrappers) {
  $wrappers['public']['class'] = 'SaeStorageStreamWrapper';
  $wrappers['public']['type'] = STREAM_WRAPPERS_WRITE_VISIBLE;
}

/**
 * Implements hook_theme_registry_alter().
 */
function sae_theme_registry_alter(&$theme_registry) {
  $theme_registry['image_style']['function'] = 'theme_sae_image_style';
}

/**
 * Modify default theme_image_style() to ours
 *
 * System default image style theme direct image path to local file system,
 * but sae store them in storage, so we need fix it.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_sae_image_style($variables) {
  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );

  image_style_transform_dimensions($variables['style_name'], $dimensions);

  $variables['width'] = $dimensions['width'];
  $variables['height'] = $dimensions['height'];

  // Determine the url for the styled image.
  $variables['path'] = image_style_url($variables['style_name'], $variables['path']);

  return theme('image', $variables);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sae_form_system_file_system_settings_alter(&$form, &$form_state, $form_id) {
  // Unregiste after build function for avoid directory check.
  $form['file_public_path']['#after_build'] = array();
  $form['file_private_path']['#after_build'] = array();
  // Can't use private file system in SAE.
  $form['file_private_path']['#disabled'] = TRUE;
  $form['file_temporary_path']['#after_build'] = array();
  // SAE temporary path is not allowed to be modified.
  $form['file_temporary_path']['#disabled'] = TRUE;
}

/**
 * Implements hook_file_presave().
 */
function sae_file_presave($file) {
  // Fetch filesize until file system is ready.
  while (!$file->filesize) {
    $file->filesize = filesize($file->uri);
    sleep(1);
  }
}
